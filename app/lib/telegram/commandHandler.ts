import type {
  TelegramMessage,
  TelegramKeyboard,
  TelegramInlineKeyboardButton,
  TelegramCallbackQuery,
  CallbackData,
} from '@/app/lib/telegram/types';
import { SessionState } from '@/app/lib/telegram/types';
import type { TelegramSessionManager } from '@/app/lib/telegram/sessionManager';
import type { TelegramAPI } from '@/app/lib/telegram/api';
import { UserService } from '@/app/lib/telegram/services/userService';
import { ObjectService } from '@/app/lib/telegram/services/objectService';
import { ExcelService } from '@/app/lib/telegram/services/excelService';

export class TelegramCommandHandler {
  private sessionManager: TelegramSessionManager;
  private api: TelegramAPI;
  private userService: UserService;
  private objectService: ObjectService;
  private excelService: ExcelService;

  constructor(sessionManager: TelegramSessionManager, api: TelegramAPI) {
    this.sessionManager = sessionManager;
    this.api = api;
    this.userService = new UserService();
    this.objectService = new ObjectService();
    this.excelService = new ExcelService(this.objectService);
  }

  async handleCommand(
    chatId: number,
    command: string,
    message: TelegramMessage,
  ): Promise<void> {
    try {
      const [cmd] = command.split(' ');

      switch (cmd.toLowerCase()) {
        case '/start':
          await this.handleStart(chatId);
          break;
        case '/help':
          await this.handleHelp(chatId);
          break;
        default:
          await this.handleUnknownCommand(chatId);
      }
    } catch (error) {
      console.error(
        `Error handling command ${command} for chat ${chatId}:`,
        error,
      );
      await this.sendErrorMessage(
        chatId,
        '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.',
      );
    }
  }

  async handleCallback(
    chatId: number,
    callbackData: string,
    callbackQuery: TelegramCallbackQuery,
  ): Promise<void> {
    try {
      const data = callbackData as CallbackData;

      switch (data) {
        case 'main_menu':
          await this.showMainMenu(chatId);
          break;
        case 'my_objects':
          await this.handleMyObjects(chatId);
          break;
        case 'export_single':
          await this.handleExportSingle(chatId);
          break;
        case 'export_all':
          await this.handleExportAll(chatId);
          break;
        case 'help':
          await this.handleHelp(chatId);
          break;
        case 'logout':
          await this.handleLogout(chatId);
          break;
        case 'start_login':
          await this.handleStartLogin(chatId);
          break;
        case 'confirm_export_all':
          await this.executeExportAll(chatId);
          break;
        default:
          if (callbackData.startsWith('export_object_')) {
            const objectId = callbackData.replace('export_object_', '');
            await this.handleExportObject(chatId, objectId);
          } else {
            await this.handleUnknownCallback(chatId);
          }
      }
    } catch (error) {
      console.error(
        `Error handling callback ${callbackData} for chat ${chatId}:`,
        error,
      );
      await this.sendErrorMessage(
        chatId,
        '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏—è.',
      );
    }
  }

  async handleRegularMessage(
    chatId: number,
    text: string,
    message: TelegramMessage,
  ): Promise<void> {
    try {
      const session = this.sessionManager.getSession(chatId);

      switch (session.state) {
        case SessionState.AwaitingEmail:
          await this.handleEmailInput(chatId, text);
          break;
        case SessionState.AwaitingPassword:
          await this.handlePasswordInput(chatId, text);
          break;
        case SessionState.Authenticated:
          await this.handleAuthenticatedMessage(chatId, text);
          break;
        default:
          await this.handleUnauthenticatedMessage(chatId);
      }
    } catch (error) {
      console.error(`Error handling message for chat ${chatId}:`, error);
      await this.sendErrorMessage(
        chatId,
        '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.',
      );
    }
  }

  private async handleStart(chatId: number): Promise<void> {
    const isAuthenticated = this.sessionManager.isAuthenticated(chatId);

    if (isAuthenticated) {
      await this.showWelcomeBackMessage(chatId);
    } else {
      await this.showWelcomeMessage(chatId);
    }
  }

  private async showWelcomeMessage(chatId: number): Promise<void> {
    const keyboard: TelegramKeyboard = {
      inline_keyboard: [
        [{ text: 'üîê –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É', callback_data: 'start_login' }],
        [{ text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'help' }],
      ],
    };

    const welcomeText = `üè¢ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ LandLord Bot!*

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º:
‚Ä¢ üìã –£–ø—Ä–∞–≤–ª—è—Ç—å –æ–±—ä–µ–∫—Ç–∞–º–∏ –∞—Ä–µ–Ω–¥—ã
‚Ä¢ üìä –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç—ã –≤ Excel
‚Ä¢ üìà –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É:`;

    await this.api.sendMessage(chatId, welcomeText, {
      parse_mode: 'Markdown',
      reply_markup: keyboard,
    });
  }

  private async showWelcomeBackMessage(chatId: number): Promise<void> {
    const userId = this.sessionManager.getUserId(chatId);
    if (!userId) {
      await this.handleStart(chatId);
      return;
    }

    const user = await this.userService.getUserById(userId);
    const welcomeText = 'üè¢ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ!';

    await this.api.sendMessage(chatId, welcomeText, {
      parse_mode: 'Markdown',
      reply_markup: this.api.createMainMenuKeyboard(),
    });
  }

  private async showMainMenu(chatId: number): Promise<void> {
    if (!this.sessionManager.isAuthenticated(chatId)) {
      await this.handleStart(chatId);
      return;
    }

    const userId = this.sessionManager.getUserId(chatId);
    const user = userId ? await this.userService.getUserById(userId) : null;

    const menuText = `üè¢ *LandLord Bot*

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user?.email || '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;

    await this.api.sendMessage(chatId, menuText, {
      parse_mode: 'Markdown',
      reply_markup: this.api.createMainMenuKeyboard(),
    });
  }

  private async handleStartLogin(chatId: number): Promise<void> {
    if (this.sessionManager.isAuthenticated(chatId)) {
      await this.api.sendMessage(chatId, '‚úÖ –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!');
      await this.showMainMenu(chatId);
      return;
    }

    this.sessionManager.updateSession(chatId, {
      state: SessionState.AwaitingEmail,
      tempData: { loginAttempts: 0 },
    });

    await this.api.sendMessage(
      chatId,
      'üìß *–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É*\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:',
      { parse_mode: 'Markdown' },
    );
  }

  private async handleEmailInput(chatId: number, email: string): Promise<void> {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

    if (!emailRegex.test(email)) {
      await this.api.sendMessage(
        chatId,
        '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email:',
      );
      return;
    }

    const session = this.sessionManager.getSession(chatId);
    this.sessionManager.updateSession(chatId, {
      state: SessionState.AwaitingPassword,
      tempData: { email, loginAttempts: session.tempData?.loginAttempts },
    });

    await this.api.sendMessage(chatId, 'üîê –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:');
  }

  private async handlePasswordInput(
    chatId: number,
    password: string,
  ): Promise<void> {
    const session = this.sessionManager.getSession(chatId);
    const email = session.tempData?.email;

    if (!email) {
      await this.api.sendMessage(
        chatId,
        '‚ùå –û—à–∏–±–∫–∞ —Å–µ—Å—Å–∏–∏. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start',
      );
      this.sessionManager.clearSession(chatId);
      return;
    }

    const authResponse = await this.userService.authenticateUser(
      email,
      password,
    );

    if (authResponse.success && authResponse.user) {
      await this.handleSuccessfulLogin(chatId, authResponse.user);
    } else {
      await this.handleFailedLogin(
        chatId,
        authResponse.error?.message || '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
      );
    }
  }

  private async handleSuccessfulLogin(
    chatId: number,
    user: any,
  ): Promise<void> {
    this.sessionManager.updateSession(chatId, {
      state: SessionState.Authenticated,
      userId: user.id,
      userRole: user.role,
      tempData: undefined,
    });

    await this.api.sendMessage(
      chatId,
      `‚úÖ *–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!*\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!`,
      {
        parse_mode: 'Markdown',
        reply_markup: this.api.createMainMenuKeyboard(),
      },
    );
  }

  private async handleFailedLogin(
    chatId: number,
    errorMessage: string,
  ): Promise<void> {
    const session = this.sessionManager.getSession(chatId);
    const attempts = (session.tempData?.loginAttempts || 0) + 1;
    const maxAttempts = 3;

    if (attempts >= maxAttempts) {
      this.sessionManager.clearSession(chatId);
      await this.api.sendMessage(
        chatId,
        '‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start',
      );
    } else {
      this.sessionManager.updateSession(chatId, {
        state: SessionState.AwaitingEmail,
        tempData: { loginAttempts: attempts },
      });

      await this.api.sendMessage(
        chatId,
        `‚ùå ${errorMessage}\n\n–ü–æ–ø—ã—Ç–∫–∞ ${attempts}/${maxAttempts}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ –µ—â–µ —Ä–∞–∑. –í–≤–µ–¥–∏—Ç–µ email:`,
      );
    }
  }

  private async handleMyObjects(chatId: number): Promise<void> {
    if (!this.sessionManager.isAuthenticated(chatId)) {
      await this.requireAuthentication(chatId);
      return;
    }

    const userId = this.sessionManager.getUserId(chatId);
    const user = userId ? await this.userService.getUserById(userId) : null;

    if (!userId || !user) {
      await this.handleAuthenticationError(chatId);
      return;
    }

    const objects = await this.objectService.getUserObjects(
      userId,
      user.role || 'CLIENT',
    );

    if (objects.length === 0) {
      await this.api.sendMessage(chatId, 'üì≠ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤.', {
        reply_markup: this.api.createBackToMenuKeyboard(),
      });
      return;
    }

    let message = 'üè¢ *–í–∞—à–∏ –æ–±—ä–µ–∫—Ç—ã:*\n\n';
    objects.forEach((obj, index) => {
      message += `${index + 1}. *${obj.name}*\n`;
      message += `   üìç ${obj.address}\n`;
      if (obj.square) {
        message += `   üè† ${obj.square} –º¬≤\n`;
      }
      if (obj.description) {
        message += `   üìù ${obj.description}\n\n`;
      }
    });

    const keyboard: TelegramKeyboard = {
      inline_keyboard: [
        [
          { text: 'üìä –≠–∫—Å–ø–æ—Ä—Ç –æ–¥–Ω–æ–≥–æ', callback_data: 'export_single' },
          { text: 'üìã –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö', callback_data: 'export_all' },
        ],
        [{ text: '‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }],
      ],
    };

    await this.api.sendMessage(chatId, message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard,
    });
  }

  private async handleExportSingle(chatId: number): Promise<void> {
    if (!this.sessionManager.isAuthenticated(chatId)) {
      await this.requireAuthentication(chatId);
      return;
    }

    const userId = this.sessionManager.getUserId(chatId);
    const user = userId ? await this.userService.getUserById(userId) : null;

    if (!userId || !user) {
      await this.handleAuthenticationError(chatId);
      return;
    }

    const objects = await this.objectService.getUserObjects(
      userId,
      user.role || 'CLIENT',
    );

    if (objects.length === 0) {
      await this.api.sendMessage(
        chatId,
        'üì≠ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.',
        {
          reply_markup: this.api.createBackToMenuKeyboard(),
        },
      );
      return;
    }

    const buttons: TelegramInlineKeyboardButton[][] = [];

    for (let i = 0; i < objects.length; i += 2) {
      const row: TelegramInlineKeyboardButton[] = [];

      row.push({
        text: `üìä ${objects[i].name}`,
        callback_data: `export_object_${objects[i].id}`,
      });

      if (i + 1 < objects.length) {
        row.push({
          text: `üìä ${objects[i + 1].name}`,
          callback_data: `export_object_${objects[i + 1].id}`,
        });
      }

      buttons.push(row);
    }

    buttons.push([{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'main_menu' }]);

    const keyboard: TelegramKeyboard = { inline_keyboard: buttons };

    await this.api.sendMessage(
      chatId,
      'üìä *–≠–∫—Å–ø–æ—Ä—Ç –æ–±—ä–µ–∫—Ç–∞*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:',
      {
        parse_mode: 'Markdown',
        reply_markup: keyboard,
      },
    );
  }

  private async handleExportAll(chatId: number): Promise<void> {
    if (!this.sessionManager.isAuthenticated(chatId)) {
      await this.requireAuthentication(chatId);
      return;
    }

    const userId = this.sessionManager.getUserId(chatId);
    const user = userId ? await this.userService.getUserById(userId) : null;

    if (!userId || !user) {
      await this.handleAuthenticationError(chatId);
      return;
    }

    const objects = await this.objectService.getUserObjects(
      userId,
      user.role || 'CLIENT',
    );

    if (objects.length === 0) {
      await this.api.sendMessage(
        chatId,
        'üì≠ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.',
        {
          reply_markup: this.api.createBackToMenuKeyboard(),
        },
      );
      return;
    }

    const confirmKeyboard: TelegramKeyboard = {
      inline_keyboard: [
        [
          {
            text: '‚úÖ –î–∞, —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å',
            callback_data: 'confirm_export_all',
          },
          { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'main_menu' },
        ],
      ],
    };

    const confirmText = `üìã *–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤*

–í—ã —Ö–æ—Ç–∏—Ç–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ ${objects.length} –æ–±—ä–µ–∫—Ç(–æ–≤)?

‚ö†Ô∏è –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –¥–ª—è –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–±—ä–µ–∫—Ç–æ–≤.`;

    await this.api.sendMessage(chatId, confirmText, {
      parse_mode: 'Markdown',
      reply_markup: confirmKeyboard,
    });
  }

  private async executeExportAll(chatId: number): Promise<void> {
    const userId = this.sessionManager.getUserId(chatId);
    const user = userId ? await this.userService.getUserById(userId) : null;

    if (!userId || !user) {
      await this.handleAuthenticationError(chatId);
      return;
    }

    try {
      await this.api.sendMessage(
        chatId,
        'üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á–µ—Ç –ø–æ –≤—Å–µ–º –æ–±—ä–µ–∫—Ç–∞–º... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è.',
      );

      const exportResult = await this.excelService.generateAllObjectsReport(
        userId,
        user.role || 'CLIENT',
      );

      await this.api.sendDocument(
        chatId,
        exportResult.buffer,
        exportResult.filename,
        'üìã –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –≤—Å–µ–º –æ–±—ä–µ–∫—Ç–∞–º\n\n‚úÖ –ì–æ—Ç–æ–≤–æ!',
      );

      setTimeout(() => {
        this.showMainMenu(chatId);
      }, 1000);
    } catch (error) {
      console.error('Export all error:', error);
      const errorMessage =
        error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      await this.api.sendMessage(
        chatId,
        `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: ${errorMessage}`,
        {
          reply_markup: this.api.createBackToMenuKeyboard(),
        },
      );
    }
  }

  private async handleExportObject(
    chatId: number,
    objectId: string,
  ): Promise<void> {
    const userId = this.sessionManager.getUserId(chatId);
    const user = userId ? await this.userService.getUserById(userId) : null;

    if (!userId || !user) {
      await this.handleAuthenticationError(chatId);
      return;
    }

    try {
      await this.api.sendMessage(chatId, 'üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é Excel —Ñ–∞–π–ª...');

      const exportResult = await this.excelService.generateObjectReport(
        objectId,
        userId,
        user.role || 'CLIENT',
      );

      const objectResponse = await this.objectService.getObjectById(
        objectId,
        userId,
        user.role || 'CLIENT',
      );

      const objectName =
        objectResponse.success && objectResponse.object
          ? objectResponse.object.name
          : '–û–±—ä–µ–∫—Ç';

      await this.api.sendDocument(
        chatId,
        exportResult.buffer,
        exportResult.filename,
        `üìä –û—Ç—á–µ—Ç –ø–æ –æ–±—ä–µ–∫—Ç—É: ${objectName}\n\n‚úÖ –ì–æ—Ç–æ–≤–æ!`,
      );

      setTimeout(() => {
        this.showMainMenu(chatId);
      }, 1000);
    } catch (error) {
      console.error('Export object error:', error);
      const errorMessage =
        error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      await this.api.sendMessage(
        chatId,
        `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: ${errorMessage}`,
        {
          reply_markup: this.api.createBackToMenuKeyboard(),
        },
      );
    }
  }

  private async handleLogout(chatId: number): Promise<void> {
    this.sessionManager.clearSession(chatId);
    await this.api.sendMessage(
      chatId,
      'üëã –í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤—Ö–æ–¥–∞.',
    );
  }

  private async handleHelp(chatId: number): Promise<void> {
    const helpText = `ü§ñ *LandLord Bot - –°–ø—Ä–∞–≤–∫–∞*

*–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*
üè¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –∞—Ä–µ–Ω–¥—ã
üìä –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –≤ Excel
üìã –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –æ–¥–Ω–∏–º –∞—Ä—Ö–∏–≤–æ–º

*–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:*
1Ô∏è‚É£ –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É (–∫–Ω–æ–ø–∫–∞ "–í–æ–π—Ç–∏")
2Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
3Ô∏è‚É£ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –Ω—É–∂–Ω—ã–µ –æ—Ç—á–µ—Ç—ã

*–ö–æ–º–∞–Ω–¥—ã:*
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞`;

    const keyboard = this.sessionManager.isAuthenticated(chatId)
      ? this.api.createBackToMenuKeyboard()
      : {
          inline_keyboard: [
            [{ text: 'üîê –í–æ–π—Ç–∏', callback_data: 'start_login' }],
          ],
        };

    await this.api.sendMessage(chatId, helpText, {
      parse_mode: 'Markdown',
      reply_markup: keyboard,
    });
  }

  private async handleAuthenticatedMessage(
    chatId: number,
    text: string,
  ): Promise<void> {
    await this.api.sendMessage(
      chatId,
      '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.',
      {
        reply_markup: this.api.createMainMenuKeyboard(),
      },
    );
  }

  private async handleUnauthenticatedMessage(chatId: number): Promise<void> {
    await this.api.sendMessage(
      chatId,
      '–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start',
    );
  }

  private async handleUnknownCommand(chatId: number): Promise<void> {
    if (this.sessionManager.isAuthenticated(chatId)) {
      await this.showMainMenu(chatId);
    } else {
      await this.handleStart(chatId);
    }
  }

  private async handleUnknownCallback(chatId: number): Promise<void> {
    await this.api.sendMessage(
      chatId,
      '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.',
      {
        reply_markup: this.api.createBackToMenuKeyboard(),
      },
    );
  }

  private async requireAuthentication(chatId: number): Promise<void> {
    await this.api.sendMessage(chatId, '‚ùå –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É', {
      reply_markup: {
        inline_keyboard: [[{ text: 'üîê –í–æ–π—Ç–∏', callback_data: 'start_login' }]],
      },
    });
  }

  private async handleAuthenticationError(chatId: number): Promise<void> {
    this.sessionManager.clearSession(chatId);
    await this.api.sendMessage(
      chatId,
      '‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∑–∞–Ω–æ–≤–æ.',
    );
    await this.handleStart(chatId);
  }

  private async sendErrorMessage(
    chatId: number,
    message: string,
  ): Promise<void> {
    try {
      await this.api.sendMessage(chatId, `‚ùå ${message}`, {
        reply_markup: this.api.createBackToMenuKeyboard(),
      });
    } catch (error) {
      console.error('Error sending error message:', error);
    }
  }
}
